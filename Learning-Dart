                                                                                     DAY:1

DART:

1.Key features and components of Dart include a virtual machine, core libraries, and a package management repository. These tools provide developers with the necessary resources to start and manage their projects efficiently.

2.Overall, Dart is a versatile language that aims to simplify the development of web and mobile applications, making it easier for developers to create high-quality software for a variety of platforms.

WHY WE USE DART:

      Dart was chosen as the programming language for Flutter for several reasons, and it offers key advantages for building user interfaces:

Asynchronous Operations:
       
      Dart provides support for asynchronous operations, which means your program can continue working on tasks while waiting for other operations to complete. This is crucial for UI development, especially when dealing with tasks like fetching data over a network, reading from a file, or writing to a database. Asynchronous programming ensures that your app remains responsive and doesn't freeze while waiting for these operations to finish.

Isolates: 

      Dart uses a different concurrency model compared to traditional multi-threading with shared-memory threads. Instead of threads, Dart uses isolates. Each isolate has its own memory heap, meaning that the state of one isolate is isolated and not accessible from another. This approach reduces the complexity and potential for errors associated with shared-state concurrency. Isolates make it easier to write concurrent code in a safe and maintainable way.

Optimized for UI:

      Dart is designed with user interface (UI) development in mind. It offers features that are particularly well-suited for building interactive and responsive user interfaces. Flutter leverages Dart's capabilities to create visually appealing and performant applications across multiple platforms.

Expanding Collections:

      Dart includes features for working with collections (lists, maps, sets, etc.) efficiently. This is essential for managing and manipulating data in UIs, where you often work with dynamic sets of information.

Customization for Each Platform: 

      Dart allows you to customize your UI for different target platforms. With Flutter, you can create a single codebase that adapts its appearance and behavior to match the specific guidelines and design principles of various platforms, such as Android and iOS.

SUMMARY:

      In summary, Dart's support for asynchronous programming, isolates for concurrency, focus on UI development, collection handling capabilities, and cross-platform customization features make it a strong choice for building modern, responsive, and visually appealing user interfaces, which is why it was chosen as the language for Flutter.



THE MAIN ENTRY POINT:

      1.The main() function in Dart serves as the entry point for your application. When you run a Dart program, the Dart compiler looks for this specific function and starts executing the code within it. If the main() function is not found in your code, you will encounter an error, and your application won't run.
      2.The keyword main is followed by a set of parentheses (()) which is followed by an opening curly bracket ({). Start writing your code from the next line and when you’re done, insert a closing curly bracket (}) in the line after the last line of your code.


SYNTAX:

      main(){
  Insert Code Here
}

EXMAMPLE:

void main() {
  print("Hello, World!");
}



NOTHING WITHOUT SEMI-COLON:

       * In Dart, just as in most programming languages, each statement needs to end with a semi-colon for the program to execute successfully.


IMPERATIVE PROGRAMING:

       * The code that appears inside of the main() function gets executed in order of appearance. Let’s modify the code in the snippet above and try printing From Dart along with Hello World.
       * It imports the dart:io library to enable I/O operations.
       * It uses the readLineSync() method to take a line of input from the user.
       * It concatenates the user's input with "Hello" and displays the result.
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
                                                                                                   DAY:2
VARIABLES:

     * Variables are used for storing information which can then be used by the computer program. Let’s look at this concept from a different angle.
     * When you declare a variable, you give it a unique name or identifier, define the type of data it can store, and set its initial value.


The SYNTAX for initializing a variable in Dart:

      dataType variableName = Initial Value


* We start off by mentioning the type of data our variable will hold, such as an integer. Then comes the variable’s unique name, followed by an equal sign (=), and the initial value. Don’t forget the semicolon at the very end.
* It is a Dart styling convention to name variables using lower camel case. In other words, you should capitalize the first letter of each word except the first word, and use no separators, eg., lowerCamelCase.


EXAMPLE:

main() {
  int myFirstDartVariable = 5;
}


DATA TYPES:

* The data type of an item or variable is an attribute that tells us what kind of data that variable can have.
* Data types can be found all around us; numbers, alphabets, or characters which are classified based on the similar properties they share.


Dart’s built-in data types:

     *  Numbers
     *  Strings
     *  Booleans
     *  Lists
     *  Sets
     *  Maps
     *  Runes
     *  Symbols



* The focus of this chapter will be numbers, strings, and booleans. Lists, sets, and maps are topics for another chapter. Runes and symbols are beyond the scope of this course.
* Before we can move on to each data type in detail, there are a couple of things you should familiarize yourself with.

VALUE AND REFERENCES:

* Data type is classified into two types they are 
            1.VALUE TYPE
            2.REFERENCE TYPE
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
                                                                                                       DAY:3



Numbers:
---------


The num Type
If we want a variable that has a number value, we will declare it using the num data type. The basic syntax is as follows:


// Method 1
num variableName = Number Literal
// Method 2
num variableName = Number Variable

Let’s look at an example.

main() {
  num firstNumber = 99;
  num secondNumber = 67.88;
  num thirdNumber = secondNumber;

  // Driver Code
  print(firstNumber);
  print(secondNumber);
  print(thirdNumber);
}



Dart numbers are further divided into two subtypes:

integers (int)
doubles (double)
Both int and double are subtypes of num.



Integers:
------------

Integers are whole numbers without a decimal point.

In the code snippet below, we are declaring two variables of type int. The first variable is a simple integer while the second variable is a hex number.

The basic syntax is as follows:

// Method 1
int variableName = Integer Literal
// Method 2
int variableName = integerVariable

Let’s look at an example.


main() {
  int simpleInteger = 1;
  int hex = 0xDA34F;
  int integer = simpleInteger;

  // Driver Code
  print(simpleInteger); 
  print(hex);
  print(integer);
}

Doubles:

Doubles are numbers that include a decimal point.

In the code snippet below, we are declaring two variables of type double. The first variable is a simple double while the second variable is an exponent.

The basic syntax is as follows:
  
    double variableNAme = Double Literal

Let’s look at an example:

main() {
  double simpleDouble = 1.1;
  double exponents = 1.42e5;

  // Driver Code
  print(simpleDouble);
  print(exponents);
}


As of Dart 2.1, integer literals are automatically converted to doubles when necessary. When you run the code snippet below, the output displayed will be 1.0 rather than 1.

main() {
  double integerLiteral = 1;
  
  print(integerLiteral);
}
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Strings:
---------
Let’s learn about strings and string literals in Dart

What are strings?
A Dart string is a sequence of UTF-16 code units. UTF stands for Unicode Transformation Format. Unicode is a set of characters in which each character is a unique code unit.

String literals
At face-value, string literals are simply text encapsulated in quotation marks

Let’s look at the various ways we can create strings in Dart.

main() {
  // Single Quotes
  print('JIJBHJBUVUF');

  // Double Quotes
  print("Using double quotes");

  // Single quotes with escape character \
  print('It\'s possible with an escape character');

  // Double quotes
  print("It's better without an escape character");
}

All we are doing in the code snippet above is printing strings using multiple techniques. They all are pretty straight forward except for maybe line 9. In line 9 we are using single quotes to create a string, however, the string itself has a single quote in the word It's. If we print the string as-is, 'It's possible with an escape character', we will get an error because the compiler will see the single quotation in the word It's as the closing quotation of the string. To solve this problem, we can use an escape character (\) which tells the compiler to escape the built-in functionality of the single quotation and evaluate it as a string.


Defining a string variable
If we want to define a variable that stores values of type String, we would use the following syntax:

String variableName = String Literal


Let’s map the syntax onto some actual Dart code.

main() {
    String s1 = "IM tony";

    print(s1);
} 



String Interpolation:
---------------------

To concatenate two strings means to join them together. Concatenation of two or more strings is done using the + operator.

main() {
  String s1 = "First half of the string. ";
  String s2 = "Second half of the string";
  print(s1 + s2);
}


The code above is pretty simple. On line 4 we are concatenating the first string, s1, and the second string, s2, and then printing the concatenated string.

String interpolation
String interpolation is the ability to create new strings or modify existing ones by embedding them with expressions. Expressions are evaluated, and the resulting values are converted into strings and concatenated with the enclosing string. Interpolation is Dart’s more concise and efficient alternative to string concatenation. However, string interpolation is a lot more complex than simple concatenation which allows a lot more flexibility.


Syntax
-------
An un-escaped $ character in a string signifies the beginning of an interpolated expression.

The $ sign can be followed by a single identifier id that does not contain the $ character

    print ("optionalstring $variableIndentifies optional string")


Learning by example:

Let’s look at some different coding examples to get a better idea of how string interpolation works

main() {
  String country = "Japan";

  print("I want to visit $country");
}

In the above code, assign a value to the country variable based on the country you want to visit.

Instead of changing the print statement each time, all we have to do is change the value of the variable being interpolated.

Let’s now try to embed a mathematical expression in a string using the curly brackets ({}).

main() {
  print("The sum of 5 and 3 equals ${5+3}.");
}


Multiple lines
You can concatenate strings using adjacent string literals as well.

Notice how we have used both double (") and single (') quotation marks.

main() {
  var s1 = 'String '
    'concatenation'
    " works even over line breaks.";
    
  print(s1);
}


When we run the code snippet above, we get one complete string on a single line.

But what if we actually wanted to have a string on multiple lines?

You can create multiline strings in Dart. To do so, you simply write your string as you want to print it and surround it with three double quotation marks or three single quotation marks.


Let’s look at an example below.

main() {
  var multilineString = """This is a 
multiline string
consisting of 
multiple lines""";

  print(multilineString);
}

Output

This is a 
multiline string
consisting of 
multiple lines

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------v
















